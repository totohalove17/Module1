Для вирішення задачі написати Python-скрипт.
Умову задачі надає викладач безпосередньо під час проведення модульного контролю.

Під час вирішення задачі необхідно ОБОВ'ЯЗКОВО дотримуватися основних принципів Continuous Integration:
1. Користуватися системою контролю версій Git:
 - додати проєкт під версійний контроль;
 - згенерувати файл .gitignore;
 - для кожної функції / методу класу - окремий коміт.
2. Для розроблених функцій написати unit-тести за допомогою бібліотеки pytest.
Для створення unit-тестів необхідно використати такі інструменти pytest: фікстури (fixtures); параметризація (parametrization).
3. За допомогою pytest-html згенерувати звіт по виконанню unit-тестів.
4. Додати файл requirements.txt із всіма залежностями проєкту.
5. Створити на GitHub віддалений публічний репозиторій, в який залити виконану роботу (коміти). У віддаленому репозиторію МАЄ ЗБЕРІГАТИСЯ вся історія комітів.
6. Додати налаштування GithubAction для автоматичного запуску тестів у віддаленому репозиторію та перевірки коду на відповідність стандарту PEP8.


На перевірку необхідно в classroom-і до завдання Middle Test #01 прикріпити посилання на Ваш GitHub репозиторій.
Останній коміт має бути зроблений не пізніше відведеного часу на виконання роботи.
Оцінювання (максимум 10 б.):
- вирішення задачі - максимум 4 б.
- використання Git - максимум 2 б.
- наявність unit-тестів - максимум 3 б.
- використання GithubAction - максимум 1 б.


Варіант 1

Напишіть Python-скрипт, який зчитує вміст файлу з розширенням ".txt" та повертає кількість слів і речень у цьому файлі.
Символи, які закінсують файл: ".", "!", "?", "..."
Символи-розділювачі: ",", "пробіл", ":", ";"


Варіант 2
Напишіть Python-скрипт, який зчитує вміст двох файлів з розширенням ".txt", порівнює їх та записує у файл з назвою "same.txt" всі рядки, які містяться в обох файлах, у файл "diff.txt" - рядки, які містяться лише в одному з двох файлів.


Варіант 3
Напишіть Python-скрипт, який зчитує вміст файлу з розширенням ".txt", відбирає всі рядки, які містять певне ключове слово, та записує результат у новий файл з назвою "filtered.txt".


Варіант 4
Напишіть Python-скрипт, який зчитує вміст файлу з розширенням ".txt", знаходить 10 найпопулярніших слів у тексті та записує результат у новий файл у форматі "слово-кількість".

Варіант 5
Напишіть Python-скрипт, який зчитує файл з розширенням ".txt" із даними про популяцію у форматі "назва країни, площа, населення" та повертає відсортовані дані окремо за площею і населенням.

Варіант 6
Напишіть Python-скрипт, який зчитує файл з розширенням ".txt" із даними про популяцію у форматі "назва країни, рік, населення" та повертає дані про зміну населення за роками для кожної країни.

Варіант 7
Напишіть Python-скрипт, який зчитує файл з розширенням ".txt" із даними про товар у форматі "назва товару, дата, ціна" та повертає дані про зміну ціни на певний товар за останній місяць.


Варіант 8:

Напишіть Python-скрипт, який розробляє систему управління завданнями (Task Management System). Система має наступні можливості:

1. Додавання завдань: користувач може ввести опис завдання, дату його створення та пріоритет (наприклад, від 1 до 5, де 1 - найвищий пріоритет).
2. Видалення завдань: користувач може видалити завдання за його ідентифікатором.
3. Виведення списку завдань: користувач може отримати список всіх завдань у системі з відсортуванням за пріоритетом або датою створення.
4. Позначення завдань як виконані: користувач може позначити завдання як виконані та видалити їх із системи.

Вимоги до скрипту:
1. Використовуйте об'єктно-орієнтований підхід для реалізації системи управління завданнями.
2. Зберігайте дані про завдання у текстовому файлі.
